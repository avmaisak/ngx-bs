{
  "extends": ["plugin:@angular-eslint/recommended"],
  "rules": {
    "@angular-eslint/directive-selector": [
      "error",
      {
        "type": "attribute",
        "style": "camelCase"
      }
    ],
    "@angular-eslint/component-selector": [
      "error",
      {
        "type": "element",
        "style": "kebab-case"
      }
    ]
  },
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": "tsconfig.base.json",
    "createDefaultProgram": true
  },
  "overrides": [{
      "files": ["*.component.ts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module"
      },
      "plugins": ["@angular-eslint/template"],
      "processor": "@angular-eslint/template/extract-inline-html"
    },
    {
      "plugins": ["simple-import-sort", "import"],
      "files": ["*.ts"],
      "extends": [
        "airbnb-typescript/base"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "tsconfig.app.json"
      },
      "rules": {
        "import/prefer-default-export": "off",
        "@typescript-eslint/member-delimiter-style": ["error", {
          "multiline": {
            "delimiter": "comma",
            "requireLast": true
          },
          "singleline": {
            "delimiter": "comma",
            "requireLast": false
          }
        }],
        "@typescript-eslint/explicit-function-return-type": ["warn", {
          "allowExpressions": true,
          "allowTypedFunctionExpressions": true
        }],
        "@typescript-eslint/no-empty-interface": "off",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/ban-ts-ignore": "off",
        "max-len": ["error", 150],
        "no-console": ["error", {
          "allow": ["warn", "error", "info"]
        }],
        "no-extend-native": "error",
        "import/no-cycle": "warn",
        "linebreak-style": "off",
        "no-underscore-dangle": "off",
        "class-methods-use-this": "off",
        "lines-between-class-members": ["error", "always"],
        "import/no-extraneous-dependencies": ["error", {
          "devDependencies": true
        }],
        "@typescript-eslint/unbound-method": ["error", {
          "ignoreStatic": true
        }],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/member-ordering": ["error", {
          "default": [
            // Index signature
            "signature",
            // Fields
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            "public-decorated-field",
            "protected-decorated-field",
            "private-decorated-field",
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            "public-abstract-field",
            "protected-abstract-field",
            "private-abstract-field",

            // Constructors
            "public-constructor",
            "protected-constructor",
            "private-constructor",

            // Methods
            "public-static-method",
            "protected-static-method",
            "private-static-method",
            "public-decorated-method",
            "protected-decorated-method",
            "private-decorated-method",
            "public-instance-method",
            "protected-instance-method",
            "private-instance-method",
            "public-abstract-method",
            "protected-abstract-method",
            "private-abstract-method"
          ]
        }],

        "simple-import-sort/sort": "error",
        "sort-imports": "off",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",

        "@typescript-eslint/explicit-member-accessibility": ["error", {
          "overrides": {
            "constructors": "no-public"
          }
        }],
        "@typescript-eslint/naming-convention": ["error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variableLike",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "memberLike",
            "format": ["camelCase"]
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"]
          },
          {
            "selector": "memberLike",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "memberLike",
            "modifiers": ["protected"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "typeParameter",
            "format": ["PascalCase"],
            "prefix": ["T"]
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "prefix": ["I"]
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/no-unused-vars": ["warn", {
          "varsIgnorePattern": "^_",
          "argsIgnorePattern": "^_"
        }],
        "@typescript-eslint/lines-between-class-members": "off"
      }
    },
    {
      "files": ["src/**/*.spec.ts", "src/**/*.d.ts"],
      "parserOptions": {
        "project": "./tsconfig.spec.json"
      },
      // Правила для линтера
      "extends": ["plugin:jasmine/recommended"],
      // Плагин для запуска правил
      "plugins": ["jasmine"],
      "env": {
        "jasmine": true
      },
      // Отключим правило "no-unused-vars"
      "rules": {
        "@typescript-eslint/no-unused-vars": "off"
      }
    }
  ]
}
